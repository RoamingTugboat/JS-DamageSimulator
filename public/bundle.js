var backend=function(n){var e={};function r(a){if(e[a])return e[a].exports;var t=e[a]={i:a,l:!1,exports:{}};return n[a].call(t.exports,t,t.exports,r),t.l=!0,t.exports}return r.m=n,r.c=e,r.d=function(n,e,a){r.o(n,e)||Object.defineProperty(n,e,{configurable:!1,enumerable:!0,get:a})},r.r=function(n){Object.defineProperty(n,"__esModule",{value:!0})},r.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return r.d(e,"a",e),e},r.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},r.p="",r(r.s=7)}([function(module,exports,__webpack_require__){"use strict";eval("\r\n\r\nmodule.exports = class Weapon {\r\n  constructor(name, damage, falloff, penetration, cycleTimeMs) {\r\n    this.name = name;\r\n    this.damage = damage;\r\n    this.falloff = falloff;\r\n    this.penetration = penetration;\r\n    this.cycleTimeMs = cycleTimeMs;\r\n  }\r\n}\n\n//# sourceURL=webpack://backend/./src/weapon.js?")},function(module,exports,__webpack_require__){"use strict";eval("\r\nconst Weapon = __webpack_require__(0)\r\n\r\nmodule.exports = {\r\n  headDmg: function(weapon, range, hasHelmet) {\r\n    return calculateDamage(weapon, range, 4.00, hasHelmet);\r\n  },\r\n  chestDmg: function(weapon, range, hasKevlar) {\r\n    return calculateDamage(weapon, range, 1.00, hasKevlar);\r\n  },\r\n  stomachDmg: function(weapon, range, hasKevlar) {\r\n    return calculateDamage(weapon, range, 1.25, hasKevlar);\r\n  },\r\n  legDmg: function(weapon, range) {\r\n    return calculateDamage(weapon, range, 0.75, false);\r\n  },\r\n  headRange: function(weapon, wishDamage, hasHelmet) {\r\n    return calculateRange(weapon, wishDamage, 4.00, hasHelmet);\r\n  },\r\n  chestRange: function(weapon, wishDamage, hasKevlar) {\r\n    return calculateRange(weapon, wishDamage, 1.00, hasKevlar);\r\n  },\r\n  stomachRange: function(weapon, wishDamage, hasKevlar) {\r\n    return calculateRange(weapon, wishDamage, 1.25, hasKevlar);\r\n  },\r\n  legRange: function(weapon, wishDamage) {\r\n    return calculateRange(weapon, wishDamage, 0.75, false);\r\n  }\r\n}\r\n\r\nfunction calculateDamage(weapon, range, hitboxMultiplier, hitboxHasArmor) {\r\n  const baseDmg = weapon.damage;\r\n  // Damage decreases to <falloff%> per 500 inches:\r\n  const rangeMultiplier = Math.pow(weapon.falloff,(range/500));\r\n  // Hitting an armored body part also incurs a damage decrease.\r\n  // CSGO has it hardcoded at weaponPenetration/2. No idea where\r\n  // the 2 comes from.\r\n  let armorMultiplier = 1.0;\r\n  if(hitboxHasArmor) {\r\n\t  armorMultiplier = weapon.penetration/2;\r\n  }\r\n  // This next line is the actual core formula by which Counter-Strike\r\n  // calculates weapon damage, and it's what this entire Program is built\r\n  // around.\r\n  const damage = baseDmg * rangeMultiplier * hitboxMultiplier * armorMultiplier;\r\n  // In-game tests revealed that dmg always gets floored.\r\n  return Math.floor(damage);\r\n}\r\n\r\nfunction calculateRange(weapon, wishDamage, hitboxMultiplier, hitboxHasArmor) {\r\n  // 4096in is the baked-in max range of all counter strike weapons (barring shotguns,\r\n  // the CSGO Terrorist shotgun for example cuts off after like 500in).\r\n  // Realistically, you're not going to see ranges further than 2000in on any maps\r\n  // (I guess dust2 CT doors to T spawn is the longest range, alongside nuke outside\r\n  // sniping).\r\n  for(let range=4096; range>0; range=range-1) {\r\n    const dmg = calculateDamage(weapon, range, hitboxMultiplier, hitboxHasArmor);\r\n    if(dmg >= wishDamage) {\r\n      return range;\r\n    }\r\n  }\r\n  return -1;\r\n}\n\n//# sourceURL=webpack://backend/./src/calculations.js?")},function(module,exports,__webpack_require__){"use strict";eval('\r\n\r\nmodule.exports = {\r\n  getColorBasedOnDamage: function(damage) {\r\n    return getColorBasedOnDamage(damage);\r\n  }\r\n}\r\n\r\nconst transparency = "0.55";\r\nconst colorNeat    = "rgba(240, 240, 240, "+transparency+")";\r\nconst colorFine    = "rgba(240, 210, 180, "+transparency+")";\r\nconst colorHurt01  = "rgba(240, 182, 156, "+transparency+")";\r\nconst colorHurt02  = "rgba(224, 128, 112, "+transparency+")";\r\nconst colorHurt03  = "rgba(208,  64,  32, "+transparency+")";\r\nconst colorHurt04  = "rgba(160,  32,   0, "+transparency+")";\r\nconst colorHurt05  = "rgba(96,   16,   0, "+transparency+")";\r\n\r\nfunction getColorBasedOnDamage(damage) {\r\n  // This simulator cares about exact damage numbers. In-game\r\n  // though, players mostly care about how many shots they need\r\n  // to land in order to score a kill. So, this method maps\r\n  // damage values to the amount of shots required to kill someone\r\n  // and returns that as a color.\r\n  // E.g.: If a shot deals 34 damage, you need 3 for a kill - at 33, you need 4.\r\n  //       If a shot deals 20 damage, you need 5 for a kill - at 19, you need 6.\r\n  if(damage >= 100) {\r\n    return colorHurt05;\r\n  } else if(damage >= 50) {\r\n    return colorHurt04;\r\n  } else if(damage >= 34) {\r\n    return colorHurt03;\r\n  } else if(damage >= 25) {\r\n    return colorHurt02;\r\n  } else if(damage >= 20) {\r\n   return colorHurt01;\r\n  } else if(damage >= 17) {\r\n    return colorFine;\r\n  } else {\r\n    return colorNeat;\r\n  }\t\t\r\n}\n\n//# sourceURL=webpack://backend/./src/hitboxDamageColors.js?')},function(module,exports,__webpack_require__){"use strict";eval("\r\n// 4/15/2018: Drew pixels on Terrorist Image in paint.net, looked at the coordinates\r\n//            paint put out for these drawn pixels, then inserted them here by hand.\r\n//            Still faster than writing a generator, but it's still not perfect. If\r\n//            this were a commercial release, I'd definitely take a full day to get\r\n//            the coordinates exactly right.\r\n\r\nconst coordsHeadVertices = [[190,4], [225,15], [242,55], [244,66], [234,83], [231,110], [206,136], [186,134], [168,120], [165,106], [154,89], [152,77], [148,70], [150,37], [160,19], [176,11]]\r\nconst coordsHeadText = [170,86]\r\nconst coordsChestVertices = [[234,91], [295,110], [328,132], [350,205], [350,254], [325,263], [316,276], [291,265], [260,266], [156,274], [101,274], [67,251], [72,223], [103,138], [133,112], [158,101], [166,115], [194,138], [213,131], [229,112]]\r\nconst coordsChestText = [185,216]\r\nconst coordsStomachVertices = [[162,272],[187,364],[151,414],[235,440],[360,422],[360,352],[350,322],[347,257],[324,266],[316,278],[290,267],[261,267]]\r\nconst coordsStomachText = [225,360]\r\nconst coordsLegsVertices = [[149,416],[101,524],[100,586],[119,623],[134,670],[133,734],[84,764],[75,784],[145,793],[168,787],[226,784],[221,752],[228,681],[201,564],[232,518],[250,614],[256,683],[277,765],[254,803],[253,814],[322,819],[350,808],[352,774],[357,731],[363,661],[337,588],[333,541],[345,528],[340,480],[358,427],[234,442]]\r\nconst coordsLegsText = [160,560]\r\n\r\nmodule.exports = {\r\n  coordsHeadVertices,\r\n  coordsHeadText,\r\n  coordsChestVertices,\r\n  coordsChestText,\r\n  coordsStomachVertices,\r\n  coordsStomachText,\r\n  coordsLegsVertices,\r\n  coordsLegsText\t\r\n}\n\n//# sourceURL=webpack://backend/./src/hitboxCoords.js?")},function(module,exports,__webpack_require__){"use strict";eval('\r\nconst hitboxCoords = __webpack_require__(3);\r\nconst hitboxDamageColors = __webpack_require__(2);\r\n\r\nmodule.exports = {\r\n  clear: function(canvas) {\r\n    clearCanvas(canvas);\r\n  },\r\n  drawHead: function(canvas, damage) {\r\n    drawOnCanvas(canvas, damage, hitboxCoords.coordsHeadVertices, hitboxCoords.coordsHeadText);\r\n  },\r\n  drawChest: function(canvas, damage) {\r\n    drawOnCanvas(canvas, damage, hitboxCoords.coordsChestVertices, hitboxCoords.coordsChestText);\r\n  },\r\n  drawStomach: function(canvas, damage) {\r\n    drawOnCanvas(canvas, damage, hitboxCoords.coordsStomachVertices, hitboxCoords.coordsStomachText);\r\n  },\r\n  drawLegs: function(canvas, damage) {\r\n    drawOnCanvas(canvas, damage, hitboxCoords.coordsLegsVertices, hitboxCoords.coordsLegsText);\r\n  },\r\n}\r\n\r\nconst fontStyle = "30px Verdana";\r\nconst fontColor = "rgba(255, 255, 255, 1.0)";\r\n\r\nfunction clearCanvas(canvas) {\r\n  const context = canvas.getContext("2d");\r\n  context.clearRect(0, 0, canvas.width, canvas.height);\r\n}\r\n\r\nfunction drawOnCanvas(canvas, damage, vertexCoords, textCoords) {\r\n  if (!canvas.getContext) {\r\n    console.log("Couldn\'t get canvas context");\r\n    return;\r\n  }\r\n  const ctx = canvas.getContext(\'2d\');\r\n  const color = hitboxDamageColors.getColorBasedOnDamage(damage);\r\n  ctx.fillStyle = color;\r\n  ctx.beginPath();\r\n  ctx.moveTo(vertexCoords[0][0],vertexCoords[0][1]);\r\n  for(let i = 1; i<vertexCoords.length; i++) {\r\n\tctx.lineTo(vertexCoords[i][0],vertexCoords[i][1]);\r\n  }\r\n  ctx.closePath();\r\n  ctx.fill();\r\n  ctx.font = fontStyle;\r\n  ctx.fillStyle = fontColor;\r\n  ctx.fillText(damage, textCoords[0], textCoords[1]);\r\n}\n\n//# sourceURL=webpack://backend/./src/canvasDrawing.js?')},function(module,exports,__webpack_require__){"use strict";eval('\r\nconst Weapon = __webpack_require__(0);\r\n\r\nlet weapons = [];\r\n\r\nmodule.exports = {\r\n  getWeapons: function() {\r\n    return weapons;\r\n  },\r\n  importWeapons(url, callback) {\r\n    importWeapons(url, callback);\r\n  }\r\n}\r\n\r\nfunction importWeapons(url, callback) {\r\n  console.log("Importing weapons from "+url+"...");\r\n  fetch(url)\r\n  .then(function(response) {\r\n    return response.json();\r\n  })\r\n  .then(function(weaponsList) {\r\n    weapons = weaponsList;\r\n\tconsole.log("Imported weapons.");\r\n\tcallback();\r\n  })\r\n}\n\n//# sourceURL=webpack://backend/./src/weaponDatabase.js?')},function(module,exports,__webpack_require__){"use strict";eval("\r\nconst weaponDb = __webpack_require__(5);\r\n\r\nmodule.exports = {\r\n  getCurrentWeapon: function() {\r\n    return getCurrentWeapon();\r\n  },\r\n  incrementWeapon: function() {\r\n    incrementWeapon();\r\n  },\r\n  decrementWeapon: function() {\r\n    decrementWeapon();\r\n  },\r\n  importWeapons: function(url, callback) {\r\n\t  weaponDb.importWeapons(url, callback);\r\n  }\r\n}\r\n\r\nlet currentWeaponIndex = 0;\r\n\r\nfunction getCurrentWeapon() {\r\n    return weaponDb.getWeapons()[currentWeaponIndex];\r\n}\r\n\r\nfunction incrementWeapon() {\r\n  currentWeaponIndex = (currentWeaponIndex+1) % weaponDb.getWeapons().length;\r\n}\r\n\r\nfunction decrementWeapon() {\r\n  currentWeaponIndex = (currentWeaponIndex-1);\r\n  if(currentWeaponIndex < 0) {\r\n    currentWeaponIndex = weaponDb.getWeapons().length-1;\r\n  }\r\n}\r\n\r\nfunction getJsonString() {\r\n  return JSON.stringify(weaponDb.getWeapons());\r\n}\n\n//# sourceURL=webpack://backend/./src/weaponSelect.js?")},function(module,exports,__webpack_require__){"use strict";eval("\r\nconst weaponSelect = __webpack_require__(6);\r\nconst canvasDrawing = __webpack_require__(4);\r\nconst calculations = __webpack_require__(1);\r\n\r\nmodule.exports = {\r\n  importWeapons: function(url, callback) {\r\n    weaponSelect.importWeapons(url, callback);\r\n  },\r\n  selectedWeaponName: function() {\r\n    return weaponSelect.getCurrentWeapon().name;\r\n  },\r\n  selectedWeaponCadenceMs: function() {\r\n    return weaponSelect.getCurrentWeapon().cycleTimeMs;\r\n  },\r\n  selectedWeaponIncrement: function() {\r\n    weaponSelect.incrementWeapon();\r\n  },\r\n  selectedWeaponDecrement: function() {\r\n    weaponSelect.decrementWeapon();\r\n  },\r\n  clearCanvas: function(canvas) {\r\n    canvasDrawing.clear(canvas);\r\n  },\r\n  drawHead: function(canvas, range, hasHelmet) {\r\n    const currentWeapon = weaponSelect.getCurrentWeapon();\r\n    const damage = calculations.headDmg(currentWeapon, range, hasHelmet);\r\n    canvasDrawing.drawHead(canvas, damage);\r\n  },\r\n  drawChest: function(canvas, range, hasKevlar) {\r\n    const currentWeapon = weaponSelect.getCurrentWeapon();\r\n    const damage = calculations.chestDmg(currentWeapon, range, hasKevlar);\r\n    canvasDrawing.drawChest(canvas, damage);\r\n  },\r\n  drawStomach: function(canvas, range, hasKevlar) {\r\n    const currentWeapon = weaponSelect.getCurrentWeapon();\r\n    const damage = calculations.stomachDmg(currentWeapon, range, hasKevlar);\r\n    canvasDrawing.drawStomach(canvas, damage);\r\n  },\r\n  drawLegs: function(canvas, range) {\r\n    const currentWeapon = weaponSelect.getCurrentWeapon();\r\n    const damage = calculations.legDmg(currentWeapon, range);\r\n    canvasDrawing.drawLegs(canvas, damage);\r\n  },\r\n  ohkHeadRange: function(hasHelmet) {\r\n    const currentWeapon = weaponSelect.getCurrentWeapon();\r\n    return calculations.headRange(currentWeapon, 100, hasHelmet);\r\n  }\r\n}\n\n//# sourceURL=webpack://backend/./src/backend.js?")}]);